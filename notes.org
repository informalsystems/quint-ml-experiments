#+title: Notes
* Tasks
** DONE Shallow embedding of functional fragment
*** DONE Terms and types
- [x] Ints
- [x] Strings
- [x] Sets
- [x] Maps
*** DONE Type checking
*** DONE Evaluation
** DONE Shallow embedding of stateful fragment
*** DONE Terms and types
- [X] State vars
- [X] Actions
*** DONE Type checking
*** DONE Effect checking
*** DONE Evaluation
* PI Week 2023
** Goals
*** Shallow embedding of a fragment of quint
- Ints
- Strings
- Sets
- Maps
- State vars
- Actions

**** Semantics

***** Use NBE?
- https://www.pls-lab.org/en/Normalization_by_Evaluation
***** Support classical logic or just intuitionistic?
- https://www.pls-lab.org/en/Classical_Curry-Howard
- https://hal.science/inria-00371959/
***** Just intuitionistic logic
- https://arxiv.org/pdf/1910.00907.pdf
- https://www.dcs.gla.ac.uk/~pmaier/papers/Maier_CSL2004_XT.pdf
- http://www.ioc.ee/%7Ewolfgang/research/eflm-2015-slides.pdf
****** Functional reactive system
- The Curry–Howard Correspondence between Temporal Logic and Functional Reactive
  Programming :: https://kodu.ut.ee/~varmo/tday-nelijarve/jeltsch-slides.pdf
- Temporal Logic with “Until”, Functional Reactive Programming with Processes,
  and Concrete Process Categories ::
  https://www.ioc.ee/~wolfgang/research/plpv-2013-paper.pdf

** Stretch

*** Compile to QuintIR
*** Functorization to support integration with an implementation
*** Complete language coverage
- Strings
- Temporal operator
- Sequences :: Use =FStar.Seq.Base=
- Tuples :: Special case of Records
- Records :: Probably can use DependantMap

** Directions for future work
*** F*
- Take advantage of its dependant typing
*** Rust
- Close gap to impl

* Presentation/write up
** Influences and prior art
** What got done
*** State spaces as dependent maps

#+begin_src fstar
type map k v = | Map : key:k -> value_type:(key -> Type) -> map k v
#+end_src

We use this in two ways:

- It gives a light weight way of working with state variables of different
  types, without having to wrap all the values in an enum.
- Internally we use a map into optional values to give static checks of legal
  updates (see the next section).
*** Legal updates are enforced statically

- Trying to update the same variable twice is a type error :: [[./tryf/Quint.State.fst::130]]
- Trying to read from a non-updated variable is a type error
- Trying to update in a read effect is a type error

*** Read effect is modeled as an applicative functor
[[./tryf/Quint.State.fst::233]]

This doesn't need to be monadic, since you cannot change the context in the
sequenced computation.

*** Action effect is modeled as monadic functor
[[./tryf/Quint.State.fst::301]]

But we don't actually need bind, since we are only dealing with boolean values.
I'm not entirely sure what to call this :)

*** Nondet effect is modeled as an applicative functor
Again, since we don't need to allow modifying the context, this needn't be
monadic.
*** RNG library ported from the quint impl
[[./tryf/Quint.Rng.Internal.fst]]
*** A naive type-class based set library allowing light weight operations over nested sets
*** A naive type-class based non-dependent map library allowing light weight operations over nested maps

** Possibilities for future
*** State spaces as *monotonic* dependent maps
Allows a monotonic property over the evolution of the state. This would allow
leveraging https://www.fstar-lang.org/papers/monotonicity/ to put reasoning about
properties of traces in the types.
*** Replace monadic interface with effect handlers
This will allow reading from state variables without using the binding
constructs, and without requiring combining 3 different functors. I.e., all the
noise from the operator like =!?= and =!@= and =let?= etc. should go away.
*** Provide alternative handlers for the effects
This would allow providing multiple different executions of the effects, one of
which would run the simulation while other would provide an interface for
imlemenentations:

| Effect              | Simulation                              | Implementation                |
|---------------------+-----------------------------------------+-------------------------------|
| nondet              | RNG or backtracking                     | Input                         |
| Disjunctive Actions | nondet choice using RNG or backtracking | Concurrent "select"/"race"    |
| Conjunctive Actions | -                                       | Concurrent join               |
| Temporal            | TODO                                    | Supervisors/monitor processes |
