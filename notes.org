#+title: Notes
* Tasks
** TODO Shallow embedding of functional fragment
*** TODO Terms and types
- [ ] Ints
- [ ] Strings
- [ ] Sets
- [ ] Maps
*** TODO Type checking
*** TODO Evaluation
** TODO Shallow embedding of stateful fragment
*** TODO Terms and types
- [ ] State vars
- [ ] Actions
*** TODO Type checking
*** TODO Effect checking
*** TODO Evaluation
* PI Week 2023
** Goals
*** Shallow embedding of a fragment of quint
- Ints
- Strings
- Sets
- Maps
- State vars
- Actions

**** Semantics

***** Use NBE?
- https://www.pls-lab.org/en/Normalization_by_Evaluation
***** Support classical logic or just intuitionistic?
- https://www.pls-lab.org/en/Classical_Curry-Howard
- https://hal.science/inria-00371959/
***** Just intuitionistic logic
- https://arxiv.org/pdf/1910.00907.pdf
- https://www.dcs.gla.ac.uk/~pmaier/papers/Maier_CSL2004_XT.pdf
- http://www.ioc.ee/%7Ewolfgang/research/eflm-2015-slides.pdf
****** Functional reactive system
- The Curry–Howard Correspondence between Temporal Logic and Functional Reactive
  Programming :: https://kodu.ut.ee/~varmo/tday-nelijarve/jeltsch-slides.pdf
- Temporal Logic with “Until”, Functional Reactive Programming with Processes,
  and Concrete Process Categories ::
  https://www.ioc.ee/~wolfgang/research/plpv-2013-paper.pdf

** Stretch

*** Compile to QuintIR
*** Functorization to support integration with an implementation
*** Complete language coverage
- Strings
- Temporal operator
- Sequences :: Use =FStar.Seq.Base=
- Tuples :: Special case of Records
- Records :: Probably can use DependantMap

** Directions for future work
*** F*
- Take advantage of its dependant typing
*** Rust
- Close gap to impl

* Presentation/write up
** Influences and prior art
** What got done
*** State spaces as dependent maps
#+begin_src fstar
type map k v = | Map : key -> value:(key -> Type) -> map key value
#+end_src
*** Legal updates are enforced statically
- Trying to update the same variable twice is a type error
- Trying to read from a non-updated variable is a type error
- Trying to update in a read effect is a type error
*** Read effect is modeled as an applicative functor
*** Action effect is modeled as monadic functor
- But don't need bind, since we are only dealing with boolean values
*** Nondet effect is modeled as an applicative functor
*** RNG library ported from the quint impl
*** A naive type-class based set library allowing light weight operations over nested sets
*** A naive type-class based non-dependent map library allowing light weight operations over nested maps

** Possibilities for future
*** State spaces as *monotonic* dependent maps
Allows a monotonic property over the evolution of the state.
*** Replace monadic interface with effect handlers
This will allow reading from state variables without using the binding
constructs.


* Misc
** Quint advantages
- Really easy construction and formation of sets
- Static detection of variable updates is very slick
  - We need a type like ='status state= where ='status= is only =updated= after
    every variable is =updated= where each action requires its variables to be
    =not_updated= before access and unsures they are =updated= after.
